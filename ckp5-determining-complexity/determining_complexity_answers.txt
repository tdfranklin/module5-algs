1. What's the Big-O of the following algorithm? Submit your work and reasoning with your solution.

    def goodbye_world(n)
        puts "Goodbye World! #{n}"
    end

    ANSWER:
        O(1) - constant time.  It will always take the exact same amount of time no matter what 'n' equals.

2. What's the Big-O of the following algorithm? Submit your work and reasoning with your solution.

    def find_largest(collection)
        largest = collection[0]
        collection.length.times do |i|
            if collection[i] >= largest
                largest = collection[i]
            end
        end
        largest
    end

    ANSWER:
        O(n) - linear time.  The amount of time will grow equally with the size of the collection since it will always look at each item
        in the collection exactly once.

3. What's the Big-O of the following algorithm? Submit your work and reasoning with your solution.

    def find_largest(collection)
        largest = collection[0][0]
        collection.length.times do |i|
            subcollection = collection[i]
            subcollection.length.times do |i|
                if subcollection[i] >= largest
                    largest = subcollection[i]
                end
            end
        end
        largest
    end

    ANSWER:
        O(n^2) - quadratic time.  Since it would have to loop through 'n' elements within 'n' collections, that would make it n * n or n^2.

4. What's the Big-O of the following algorithm? Submit your work and reasoning with your solution.

    def numbers(n)
        if (n == 0)
            return 0
        elsif (n == 1)
            return 1
        else
            return numbers(n-1) + numbers(n-2)
        end
    end

    ANSWER:
        O(2^n) - exponential time.  Since it will recursively call the function '2^n-1' + '2^n-2' + 1 times, once you drop the constants, it would become 2^n.

5. What's the Big-O of the following algorithm? Submit your work and reasoning with your solution.

    def iterative(n)
        num1 = 0
        num2 = 1
        i = 0
        while i < n-1
            tmp = num1 + num2
            num1 = num2
            num2 = tmp
            i+=1
        end
        num2
    end

    ANSWER:
        O(n) - linear time.  The function will run 0 through n since each loop increments the number by 1, so it would actually be n + constant time, but constants are dropped.

6. What's the Big-O of the following algorithm? Submit your work and reasoning with your solution.

    def sort(collection, from=0, to=nil)
        if to == nil
            # Sort the whole collection, by default
            to = collection.count - 1
        end

        if from >= to
            # Done sorting
            return
        end

        # Take a pivot value, at the far left
        pivot = collection[from]

        # Min and Max pointers
        min = from
        max = to

        # Current free slot
        free = min

        while min < max
            if free == min # Evaluate collection[max]
                if collection[max] <= pivot # Smaller than pivot, must move
                    collection[free] = collection[max]
                    min += 1
                    free = max
                else
                    max -= 1
                end
            elsif free == max # Evaluate collection[min]
                if collection[min] >= pivot # Bigger than pivot, must move
                    collection[free] = collection[min]
                    max -= 1
                    free = min
                else
                    min += 1
                end
            else
                raise "Inconsistent state"
            end
        end

        collection[free] = pivot

        sort collection, from, free - 1
        sort collection, free + 1, to

        collection
    end

    ANSWER:
        O(n^2) - quadratic time.  This one is certainly more difficult to look at, but in the end, it looks like it is running 'n' + 'n/2' + 'n/2' times or n^2.